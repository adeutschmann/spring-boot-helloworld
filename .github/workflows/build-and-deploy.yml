name: Build and Deploy to Nexus

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'
  REGISTRY: ghcr.io
  IMAGE_NAME: spring-boot-helloworld

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: ./mvnw test

    - name: Build JAR
      run: ./mvnw clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-helloworld-jar-${{ github.sha }}
        path: target/*.jar
        retention-days: 30

  build-container:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-helloworld-jar-${{ github.sha }}
          path: target/

      - name: Extract version
        id: version
        run: |
          # Extract version from pom.xml
          VERSION=$(grep -m1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          # Remove -SNAPSHOT for container tags
          CLEAN_VERSION=$(echo $VERSION | sed 's/-SNAPSHOT//')
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "Version: $CLEAN_VERSION"

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Build container image
        id: build
        run: |
          echo "üèóÔ∏è Building container image..."
          
          # Build with podman
          podman build -t local-build .
          
          echo "Container image built successfully"

      - name: Tag images for release
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          echo "üè∑Ô∏è Tagging images for release..."
          echo "Registry: $REGISTRY"
          echo "Image name: $IMAGE_NAME"
          echo "Version: ${{ steps.version.outputs.version }}"
          
          # Tag with version
          if [ -n "$REGISTRY" ] && [ "$REGISTRY" != "" ]; then
            echo "Tagging with registry: $REGISTRY"
            podman tag local-build $REGISTRY/$IMAGE_NAME:${{ steps.version.outputs.version }}
            podman tag local-build $REGISTRY/$IMAGE_NAME:latest
          else
            echo "No registry configured, using local tags"
            podman tag local-build $IMAGE_NAME:${{ steps.version.outputs.version }}
            podman tag local-build $IMAGE_NAME:latest
          fi
          
          echo "Tagged images:"
          podman images | grep $IMAGE_NAME

      - name: Login to Container Registry
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Push container images
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "üöÄ Pushing container images..."
          
          if [ -n "${{ env.REGISTRY }}" ]; then
            podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
            echo "‚úÖ Images pushed successfully:"
            echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
            echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          else
            echo "‚ö†Ô∏è No registry configured, skipping push"
          fi

  deploy-to-nexus:
    runs-on: ubuntu-latest
    needs: build
    # Only deploy to Nexus on merge to main/master (not on PRs)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Configure Maven settings for Nexus
      run: |
        mkdir -p ~/.m2
        
        # Escape special XML characters in credentials
        NEXUS_USERNAME_ESCAPED=$(echo "$NEXUS_USERNAME" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&apos;/g')
        NEXUS_PASSWORD_ESCAPED=$(echo "$NEXUS_PASSWORD" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&apos;/g')
        
        cat > ~/.m2/settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>nexus-releases</id>
              <username>NEXUS_USERNAME_PLACEHOLDER</username>
              <password>NEXUS_PASSWORD_PLACEHOLDER</password>
            </server>
            <server>
              <id>nexus-snapshots</id>
              <username>NEXUS_USERNAME_PLACEHOLDER</username>
              <password>NEXUS_PASSWORD_PLACEHOLDER</password>
            </server>
          </servers>
        </settings>
        EOF
        
        # Replace placeholders with escaped values
        sed -i "s/NEXUS_USERNAME_PLACEHOLDER/$NEXUS_USERNAME_ESCAPED/g" ~/.m2/settings.xml
        sed -i "s/NEXUS_PASSWORD_PLACEHOLDER/$NEXUS_PASSWORD_ESCAPED/g" ~/.m2/settings.xml
        
        echo "‚úÖ Maven settings.xml configured successfully"
        echo "Settings file contents (with masked credentials):"
        sed 's/<password>.*<\/password>/<password>***<\/password>/g' ~/.m2/settings.xml
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    - name: Extract current version
      id: version
      run: |
        # Make Maven wrapper executable
        chmod +x ./mvnw
        
        # Try multiple methods to extract version
        echo "Attempting to extract version from pom.xml..."
        
        # Method 1: Try Maven wrapper
        if CURRENT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null); then
          echo "‚úÖ Version extracted using Maven wrapper: $CURRENT_VERSION"
        else
          echo "‚ö†Ô∏è Maven wrapper failed, trying alternative methods..."
        
          # Method 2: Parse pom.xml directly
          CURRENT_VERSION=$(grep -m1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/' | xargs)
          echo "‚úÖ Version extracted from pom.xml: $CURRENT_VERSION"
        fi
        
        # Validate version format
        if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?$ ]]; then
          echo "‚ùå Invalid version format: $CURRENT_VERSION"
          echo "Setting default version: 0.0.1-SNAPSHOT"
          CURRENT_VERSION="0.0.1-SNAPSHOT"
        fi
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

        # Remove -SNAPSHOT suffix and extract version parts
        BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
        echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT

        # Extract major, minor, patch
        MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
        MINOR=$(echo $BASE_VERSION | cut -d. -f2)
        PATCH=$(echo $BASE_VERSION | cut -d. -f3)

        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        RELEASE_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        NEXT_SNAPSHOT_VERSION="$MAJOR.$MINOR.$((NEW_PATCH + 1))-SNAPSHOT"

        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "next_snapshot_version=$NEXT_SNAPSHOT_VERSION" >> $GITHUB_OUTPUT

        echo "Current version: $CURRENT_VERSION"
        echo "Release version: $RELEASE_VERSION"
        echo "Next snapshot version: $NEXT_SNAPSHOT_VERSION"

    - name: Set release version
      run: |
        ./mvnw versions:set -DnewVersion=${{ steps.version.outputs.release_version }} -DgenerateBackupPoms=false
        echo "Set version to: ${{ steps.version.outputs.release_version }}"

    - name: Deploy release to Nexus
      run: ./mvnw deploy -DskipTests -Dnexus.url=${{ secrets.NEXUS_URL }}
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    - name: Create Git tag for release
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.release_version }}" -m "Release version ${{ steps.version.outputs.release_version }}"
        git push origin "v${{ steps.version.outputs.release_version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update to next snapshot version
      run: |
        git checkout ${{ github.ref_name }}
        ./mvnw versions:set -DnewVersion=${{ steps.version.outputs.next_snapshot_version }} -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "chore: bump version to ${{ steps.version.outputs.next_snapshot_version }}"
        git push origin ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload deployment summary
      if: always()
      run: |
        echo "## Deployment Summary üöÄ" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Released Version**: ${{ steps.version.outputs.release_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Next Development Version**: ${{ steps.version.outputs.next_snapshot_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Java Version**: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Maven Build**: $(if [ ${{ job.status }} == 'success' ]; then echo '‚úÖ Success'; else echo '‚ùå Failed'; fi)" >> $GITHUB_STEP_SUMMARY
        echo "- **Nexus Deploy**: $(if [ ${{ job.status }} == 'success' ]; then echo '‚úÖ Deployed'; else echo '‚ùå Failed'; fi)" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Tag**: v${{ steps.version.outputs.release_version }}" >> $GITHUB_STEP_SUMMARY
