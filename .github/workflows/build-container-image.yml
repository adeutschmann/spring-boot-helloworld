name: Build and Push Container Image with Podman

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'
  REGISTRY: ${{ secrets.NEXUS_DOCKER_REGISTRY }}
  IMAGE_NAME: spring-boot-helloworld

jobs:
  build-jar:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: ./mvnw test

    - name: Build JAR
      run: ./mvnw clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-helloworld-jar-${{ github.sha }}
        path: target/*.jar
        retention-days: 30

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: build-jar
    # Build image on all events, but only push to registry on merge to main/master

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman
      run: |
        # Update package list
        sudo apt-get update
        
        # Install Podman
        sudo apt-get install -y podman
        
        # Verify installation
        podman --version
        
        # Configure Podman for rootless operation
        sudo sysctl kernel.unprivileged_userns_clone=1

    - name: Set up JDK for version extraction
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Extract version information
      id: version
      run: |
        # Extract version from pom.xml
        VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Create image tags
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SHORT_SHA=${GITHUB_SHA::8}
        
        # Set base image name
        IMAGE_BASE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        
        # Create tags
        if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master") ]]; then
          # Main/master branch - create release tags
          RELEASE_VERSION=$(echo $VERSION | sed 's/-SNAPSHOT//')
          PRIMARY_TAG="${IMAGE_BASE}:${RELEASE_VERSION}"
          LATEST_TAG="${IMAGE_BASE}:latest"
          echo "primary_tag=$PRIMARY_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          # Feature branch or PR - create development tags
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            DEV_TAG="${IMAGE_BASE}:pr-${{ github.event.number }}"
          else
            DEV_TAG="${IMAGE_BASE}:${VERSION}-${SHORT_SHA}"
          fi
          echo "dev_tag=$DEV_TAG" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Generated tags for version: $VERSION"

    - name: Build container image with Podman
      run: |
        echo "🔨 Building container image with Podman..."
        
        # Build the image
        podman build \
          --tag local-build \
          --file ./Containerfile \
          --label "org.opencontainers.image.title=${{ env.IMAGE_NAME }}" \
          --label "org.opencontainers.image.description=Spring Boot HelloWorld application with RouterFunction" \
          --label "org.opencontainers.image.version=${{ steps.version.outputs.version }}" \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --label "org.opencontainers.image.revision=${{ github.sha }}" \
          --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          .
          
        echo "✅ Container image built successfully"
        
        # List images
        podman images

    - name: Tag images for release
      if: steps.version.outputs.is_release == 'true'
      run: |
        echo "🏷️ Tagging images for release..."
        
        # Tag with version
        podman tag local-build ${{ steps.version.outputs.primary_tag }}
        
        # Tag with latest
        podman tag local-build ${{ steps.version.outputs.latest_tag }}
        
        echo "Tagged images:"
        podman images | grep ${{ env.IMAGE_NAME }}

    - name: Tag images for development
      if: steps.version.outputs.is_release == 'false'
      run: |
        echo "🏷️ Tagging images for development..."
        
        # Tag with development tag
        podman tag local-build ${{ steps.version.outputs.dev_tag }}
        
        echo "Tagged images:"
        podman images | grep ${{ env.IMAGE_NAME }}

    - name: Login to Nexus registry
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      run: |
        echo "🔐 Logging into Nexus registry..."
        echo "${{ secrets.NEXUS_PASSWORD }}" | podman login \
          --username "${{ secrets.NEXUS_USERNAME }}" \
          --password-stdin \
          ${{ env.REGISTRY }}

    - name: Push release images to Nexus
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && steps.version.outputs.is_release == 'true'
      run: |
        echo "🚀 Pushing release images to Nexus..."
        
        # Push version tag
        podman push ${{ steps.version.outputs.primary_tag }}
        echo "✅ Pushed: ${{ steps.version.outputs.primary_tag }}"
        
        # Push latest tag
        podman push ${{ steps.version.outputs.latest_tag }}
        echo "✅ Pushed: ${{ steps.version.outputs.latest_tag }}"

    - name: Create Git tag for container release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && steps.version.outputs.is_release == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        RELEASE_VERSION="${{ steps.version.outputs.release_version }}"
        CONTAINER_TAG="container-v${RELEASE_VERSION}"
        git tag -a "${CONTAINER_TAG}" -m "Container release version ${RELEASE_VERSION}"
        git push origin "${CONTAINER_TAG}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build summary
      if: always()
      run: |
        echo "## Container Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Tool**: Podman" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.version.outputs.is_release }}" == "true" ]]; then
          echo "- **Release Version**: ${{ steps.version.outputs.release_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Primary Tag**: ${{ steps.version.outputs.primary_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag**: ${{ steps.version.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Development Tag**: ${{ steps.version.outputs.dev_tag }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Pushed to Registry**: $(if [ '${{ github.event_name }}' == 'push' ] && ([ '${{ github.ref }}' == 'refs/heads/main' ] || [ '${{ github.ref }}' == 'refs/heads/master' ]); then echo '✅ Yes'; else echo '❌ No (build only)'; fi)" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master") && "${{ steps.version.outputs.is_release }}" == "true" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Container Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run with Podman" >> $GITHUB_STEP_SUMMARY
          echo "podman pull ${{ steps.version.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "podman run -p 8080:8080 ${{ steps.version.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or with Docker" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.version.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:8080 ${{ steps.version.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Test the application" >> $GITHUB_STEP_SUMMARY
          echo "curl http://localhost:8080/hello" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
